{#
 * ---------------------------------------------------------------------
 * GLPI - Gestionnaire Libre de Parc Informatique
 * Copyright (C) 2015-2018 Teclib' and contributors.
 *
 * http://glpi-project.org
 *
 * based on GLPI - Gestionnaire Libre de Parc Informatique
 * Copyright (C) 2003-2014 by the INDEPNET Development Team.
 *
 * ---------------------------------------------------------------------
 *
 * LICENSE
 *
 * This file is part of GLPI.
 *
 * GLPI is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * GLPI is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with GLPI. If not, see <http://www.gnu.org/licenses/>.
 * ---------------------------------------------------------------------
 #}
{% extends "glpi_page.twig" %}

{% block content %}
<div class="content">
   <div class="box box-default">
      <div class="box-header with-border">
         <h3 class="box-title">{{ __('Search %1$s')|format(item.getTypeName()|lower)}}</h3>
         <div class="box-tools pull-right">
            <button id="default_items" type="button" class="btn btn-default btn-sm" title="{{ __s('Select default items to show') }}">
               <i class="fa fa-wrench"></i>
               <span class="sr-only">{{ __s('Select default items to show') }}</span>
            </button>
            <div class="btn-group">
               <button type="button" class="btn btn-default btn-sm dropdown-toggle" data-toggle="dropdown">
                  {{ __('Download') }}&nbsp;<span class="fa fa-caret-down"></span>
               </button>
               <ul class="dropdown-menu">
                  <li><a href="{#{Search::PDF_OUTPUT_LANDSCAPE}#}">{{ __('Current page in landscape PDF') }}</a></li>
                  <li><a href="{#{Search::PDF_OUTPUT_PORTRAIT}#}">{{ __('Current page in portrait PDF') }}</a></li>
                  <li><a href="{#{Search::SYLK_OUTPUT}#}">{{ __('Current page in SLK') }}</a></li>
                  <li><a href="{#{Search::CSV_OUTPUT}#}">{{ __('Current page in CSV') }}</a></li>
                  <li><a href="{#{'-'.Search::PDF_OUTPUT_LANDSCAPE}#}">{{ __('All pages in landscape PDF') }}</a></li>
                  <li><a href="{#{'-'.Search::PDF_OUTPUT_PORTRAIT}#}">{{ __('All pages in portrait PDF') }}</a></li>
                  <li><a href="{#{'-'.Search::SYLK_OUTPUT}#}">{{ __('All pages in SLK') }}</a></li>
                  <li><a href="{#{'-'.Search::CSV_OUTPUT}#}">{{ __('All pages in CSV') }}</a></li>
               </ul>
            </div>
         </div>
      </div>
      <div class="box-body">
         <form class="form-horizontal" id="search_form" action="{{ path_for('list', {'itemtype': search_data.itemtype }) }}">
            <div id="query_builder"></div>
            {{ search_form|raw }}
            <div class='pager_controls'>

            <div class='switch grey_border pager_controls'>
               <label for="dropdown_glpilist_limit">{{ __('Display (number of items)') }}</label>
               <select name="dropdown_glpilist_limit" id="dropdown_glpilist_limit" class="forSelect2">
                  <option value="10">10</option>
                  <option value="25">25</option>
                  <option value="50">50</option>
                  <option value="100">100</option>
               </select>
   {% if item.maybeDeleted() %}
               <label for="is_deleted" title="{{ __s('Show the dustbin') }}">{{  __s('Show the dustbin') }}</label>
                  {#<span class='sr-only'>{{  __s('Show the dustbin') }}</span>#}
                  {#<input type="hidden" name="is_deleted" value="0" />#}
               <input type="checkbox" id="is_deleted" name="is_deleted" value="1" />
   {% endif %}
               <input type='checkbox' name='as_map' id='as_map' value='1'{% if search_data.search.as_map == 1 %} checked="checked"{% endif %}/>
               <label for='as_map'>
                  <span title="{{ __s('Show as map') }}" class="pointer fa fa-globe"></span>
               </label>
            </div>
            <div class="mailbox-controls">
               <div class="pull-right">
                  {{ __('%1$s-%2$s/%3$s')|format(
                     search_data.search.start + search_data.data.begin + 1,
                     search_data.search.start + search_data.data.end + 1,
                     search_data.data.totalcount
                  ) }}
                  {#{{ __('From %1$d to %2$d of %3$d')|format() }} , $current_start, $current_end, $numrows); #}
                  <div class="btn-group">
                        <a
                           class="btn btn-default btn-sm"
                           href="{% if search_data.pagination.previous_page == false %}#{% else %}{{ path_for('list', {'itemtype': search_data.itemtype, 'page': search_data.pagination.previous_page}) }}{% endif %}"
                           title="{{ __("Previous page (%1$s)")|format(search_data.pagination.previous_page) }}"
                        >
                           <i class="fa fa-chevron-left"></i>
                           <span class="sr-only">{{ __("Previous page (%1$s)")|format(search_data.pagination.previous_page) }}</span>
                        </a>
                        <a
                           class="btn btn-default btn-sm"
                           href="{% if search_data.pagination.next_page == false %}#{% else %}{{ path_for('list', {'itemtype': search_data.itemtype, 'page': search_data.pagination.next_page}) }}{% endif %}"
                           title="{{ __("Next page (%1$s)")|format(search_data.pagination.next_page) }}"
                        >
                           <i class="fa fa-chevron-right"></i>
                           <span class="sr-only">{{ __("Next page (%1$s)")|format(search_data.pagination.next_page) }}</span>
                        </a>
                  </div>
                  <!-- /.btn-group -->
               </div>
               <!-- /.pull-right -->
            </div>
            <table class="table table-bordered table-hover table-striped">
               <thead>
                  <tr>
                     <th class="sorting" style="width:1em;">
                        <input type="checkbox" class="checkall"/>
                     </th>
   {% for key, header in search_data.data.cols %}
      {#
               $linkto = '';
               if (!$val['meta']
                  && (!isset($val['searchopt']['nosort'])
                     || !$val['searchopt']['nosort'])) {

                  $linkto = $data['search']['target'].(strpos($data['search']['target'], '?') ? '&amp;' : '?').
                              "itemtype=".$data['itemtype']."&amp;sort=".
                              $val['id']."&amp;order=".
                              (($data['search']['order'] == "ASC") ?"DESC":"ASC").
                              "&amp;start=".$data['search']['start']."&amp;".$globallinkto;
               }
               // Not main itemtype add itemtype to display
               if ($data['itemtype'] != $val['itemtype']) {
                  if (!isset($metanames[$val['itemtype']])) {
                     if ($metaitem = getItemForItemtype($val['itemtype'])) {
                        $metanames[$val['itemtype']] = $metaitem->getTypeName();
                     }
                  }
                  $name = sprintf(__('%1$s - %2$s'), $metanames[$val['itemtype']],
                                 $val["name"]);
               }
               $headers_line .= self::showHeaderItem($data['display_type'],
                                                      $name,
                                                      $header_num, $linkto,
                                                      (!$val['meta']
                                                      && ($data['search']['sort'] == $val['id'])),
                                                      $data['search']['order']);

      #}
      {% set name = header.name %}
      {# prefix by group name (corresponding to optgroup in dropdown) if exists #}
      {% if header.groupname is defined %}
         {% if header.groupname is iterable %}
            {% set name = header.groupname.name ~ ' - ' ~ name  %}
         {% else %}
            {% set name = header.groupname ~ ' - ' ~ name  %}
         {% endif %}
      {% endif %}
                     <th class="sorting">
                        {{ name }}
                     </th>
   {% endfor %}
{#
            // Display column Headers for toview items
            $metanames = [];

            // Add specific column Header
            if (isset($CFG_GLPI["union_search_type"][$data['itemtype']])) {
               $headers_line .= self::showHeaderItem($data['display_type'], __('Item type'),
                                                      $header_num);
            }
            // End Line for column headers
            $headers_line        .= self::showEndLine($data['display_type']);

            $headers_line_top    .= $headers_line;
            if ($data['display_type'] == self::HTML_OUTPUT) {
               $headers_line_bottom .= $headers_line;
            }

            $headers_line_top    .= self::showEndHeader($data['display_type']);
            // $headers_line_bottom .= self::showEndHeader($data['display_type']);

            echo $headers_line_top;
#}
                  </tr>
               </thead>
               <tbody>
{#
            //IMPORTANT FOR ITEMS NAVIGATION
            // Init list of items displayed
            if ($data['display_type'] == self::HTML_OUTPUT) {
               Session::initNavigateListItems($data['itemtype']);
            }
#}
   {% for rowkey, row in search_data.data.rows %}
                  <tr>
                     <td>
                        <input type="checkbox" name="_ids[]" value="{{ row.raw.ITEM_0_id }}"/>
                     </td>
      {% for colkey, col in search_data.data.cols %}
      {#
              if (isset($CFG_GLPI["union_search_type"][$data['itemtype']])) {
                  if (!isset($typenames[$row["TYPE"]])) {
                     if ($itemtmp = getItemForItemtype($row["TYPE"])) {
                        $typenames[$row["TYPE"]] = $itemtmp->getTypeName();
                     }
                  }
                  echo self::showItem($data['display_type'], $typenames[$row["TYPE"]],
                                    $item_num, $row_num);
               }
      #}
                     <td>
         {% if not col.meta %}
                        {{ row[colkey].displayname|raw }}
            {#echo self::showItem($data['display_type'], $row[$colkey]['displayname'],
                                          $item_num, $row_num,
                                          self::displayConfigItem($data['itemtype'], $col['id'],
                                                                  $row, $colkey));#}
         {% else %} {# META case #}
                        {{ row[colkey].displayname|raw }}
            {# echo self::showItem($data['display_type'], $row[$colkey]['displayname'],
                                       $item_num, $row_num);#}
                  }
         {% endif %}
                     </td>
      {% endfor %}
                  </tr>
{#
            $typenames = [];
            // Display Loop
            foreach ($data['data']['rows'] as $rowkey => $row) {
               // Column num
               $item_num = 1;
               $row_num++;
               // New line
               echo self::showNewLine($data['display_type'], ($row_num%2),
                                    $data['search']['is_deleted']);

               $current_type       = (isset($row['TYPE']) ? $row['TYPE'] : $data['itemtype']);
               $massiveaction_type = $current_type;

               if (($data['itemtype'] != 'AllAssets')
                  && isset($CFG_GLPI["union_search_type"][$data['itemtype']])) {
                  $massiveaction_type = $data['itemtype'];
               }

               // Add item in item list
               Session::addToNavigateListItems($current_type, $row["id"]);

               if (($data['display_type'] == self::HTML_OUTPUT)
                     && $showmassiveactions) { // HTML display - massive modif
                  $tmpcheck = "";

                  if (($data['itemtype'] == 'Entity')
                        && !in_array($row["id"], $_SESSION["glpiactiveentities"])) {
                     $tmpcheck = "&nbsp;";

                  } else if ($data['itemtype'] == 'User'
                           && !Session::isViewAllEntities()
                           && !Session::haveAccessToOneOfEntities(Profile_User::getUserEntities($row["id"], false))) {
                     $tmpcheck = "&nbsp;";

                  } else if (($data['item'] instanceof CommonDBTM)
                              && $data['item']->maybeRecursive()
                              && !in_array($row["entities_id"], $_SESSION["glpiactiveentities"])) {
                     $tmpcheck = "&nbsp;";

                  } else {
                     $tmpcheck = Html::getMassiveActionCheckBox($massiveaction_type,
                                                               $row[$massiveaction_field]);
                  }
                  echo self::showItem($data['display_type'], $tmpcheck, $item_num, $row_num,
                                       "width='10'");
               }

               // Print other toview items
               foreach ($data['data']['cols'] as $colkey => $col) {
                  if (!$col['meta']) {
                     echo self::showItem($data['display_type'], $row[$colkey]['displayname'],
                                          $item_num, $row_num,
                                          self::displayConfigItem($data['itemtype'], $col['id'],
                                                                  $row, $colkey));
                  } else { // META case
                     echo self::showItem($data['display_type'], $row[$colkey]['displayname'],
                                       $item_num, $row_num);
                  }
               }

               if (isset($CFG_GLPI["union_search_type"][$data['itemtype']])) {
                  if (!isset($typenames[$row["TYPE"]])) {
                     if ($itemtmp = getItemForItemtype($row["TYPE"])) {
                        $typenames[$row["TYPE"]] = $itemtmp->getTypeName();
                     }
                  }
                  echo self::showItem($data['display_type'], $typenames[$row["TYPE"]],
                                    $item_num, $row_num);
               }
               // End Line
               echo self::showEndLine($data['display_type']);
            }
#}
   {% endfor %}
               </tbody>
            </table>
         </form>
      </div> <!-- /.box-body -->
      <div class="box-footer">
         {{ __('From %1$d to %2$d of %3$d')|format(
            search_data.search.start + search_data.data.begin + 1,
            search_data.search.start + search_data.data.end + 1,
            search_data.data.totalcount
         ) }}
         <div class="pull-right">
            <ul class="pagination">
               <li class="paginate_button first{% if search_data.pagination.current_page == 1 %} disabled{% endif %}">
                  <a href="{{ path_for('list', {'itemtype': search_data.itemtype, 'page': 1}) }}" title="{{ __("First page") }}">
                     <i class="fa fa-fast-backward"></i>
                     <span class="sr-only">{{ __("First page") }}</span>
                  </a>
               </li>
               <li class="paginate_button previous{% if search_data.pagination.previous_page == false %} disabled{% endif %}">
                  <a href="{% if search_data.pagination.previous_page == false %}#{% else %}{{ path_for('list', {'itemtype': search_data.itemtype, 'page': search_data.pagination.previous_page})}}{% endif %}" title="{{ __("Previous page (%1$s)")|format(search_data.pagination.previous_page) }}">
                     <i class="fa fa-step-backward"></i>
                     <span class="sr-only">
                        {{ __("Previous page (%1$s)")|format(search_data.pagination.previous_page) }}
                     </span>
                  </a>
               </li>
{% for page in search_data.pagination.pages %}
               <li class="paginate_button{% if page.current is defined %} active{% endif %}">
                  <a href="{{ path_for('list', {'itemtype': search_data.itemtype, 'page': page.value}) }}" title="{{ page.title }}">
                     {% set page_content = page.label|default(page.value) %}
                     {{ page_content|raw  }}
                  </a>
               </li>
{% endfor %}
               <li class="paginate_button next{% if search_data.pagination.next_page == false %} disabled{% endif %}">
                  <a href="{{ path_for('list', {'itemtype': search_data.itemtype, 'page': search_data.pagination.next_page })}}" title="{{ __("Next page (%1$s)")|format(search_data.pagination.next_page) }}">
                     <i class="fa fa-step-forward"></i>
                     <span class="sr-only">
                        {{ __("Next page (%1$s)")|format(search_data.pagination.next_page) }}
                     </span>
                  </a>
               </li>
               <li class="paginate_button last{% if search_data.pagination.current_page == search_data.pagination.last_page %} disabled{% endif %}">
                  <a href="{{ path_for('list', {'itemtype': search_data.itemtype, 'page': search_data.pagination.last_page }) }}" title="{{ __("Last page (%1$s)")|format(search_data.pagination.last_page) }}">
                     <i class="fa fa-fast-forward"></i>
                     <span class="sr-only">{{ __("Last page (%1$s)")|format(search_data.pagination.last_page) }}</span>
                  </a>
               </li>
            </ul>
         </div><!-- /.pull-right -->
      </div><!-- /.box-footer -->
   </div> <!-- /.box-default -->
</div>
{% endblock %}

{% block head %}
   {% set css_paths = css_paths|default([])|merge([
      js_libs ~ '/jQuery-QueryBuilder/dist/css/query-builder.default.min.css'
      ]) %}
   {{ parent() }}
{% endblock %}

{% block javascripts %}
   {% set js_paths = js_paths|default([])|merge([
         js_libs ~ '/jquery-ui/jquery-ui.min.js',
         js_libs ~ '/jquery-extendext/jQuery.extendext.min.js',
         js_libs ~ '/doT/doT.min.js',
         js_libs ~ '/interactjs/dist/interact.min.js',
         js_libs ~ '/jQuery-QueryBuilder/dist/js/query-builder.js',
         js_libs ~ '/moment/min/moment-with-locales.min.js'
      ]) %}
   {{ parent() }}
   <script type="text/javascript">
      $(function() {
         $('#default_items').on('click', function() {
            createModalWindow(
               CFG_GLPI.root_doc + '/front/displaypreference.form.php?itemtype={{ search_data.itemtype }}', {
                  'title': '{{ __('Select default items to show') }}',
                  {#'extraparams': '{{ {'target': path_for('slash')}|json_encode(constant('JSON_FORCE_OBJECT')) }}',#}
                  'open': true
               }
            );
         });
                  {#$search_config_top
                  .= Ajax::createIframeModalWindow('search_config_top',
                                                   $CFG_GLPI["root_doc"].
                                                      "/front/displaypreference.form.php?itemtype=".
                                                      $data['itemtype'],
                                                   ['title'
                                                            => __('Select default items to show'),
                                                         'reloadonclose'
                                                            => true,
                                                         'display'
                                                            => false]);#}
         $('#is_deleted').on('click', function() {
            //onClick="toogle('is_deleted','','','');
            //document.forms['searchform{#$_POST["itemtype"]#}'].submit();"
            toogle('is_deleted','','','');
            $('form#search_form').submit();
         });
         $('#as_map').on('click', function() {
            toogle('as_map','','','');
            //document.forms['searchform{#$data["itemtype"]#}'].submit();
            $('form#search_form').submit();
         });

         var rules_plugins = {
            condition: 'AND',
            rules: [{
               id: 'name',
               operator: 'equal',
               value: ''
            }/*, {
               condition: 'OR',
               rules: [{
                  id: 'category',
                  operator: 'in',
                  value: [1, 2]
               }, {
                  id: 'in_stock',
                  operator: 'equal',
                  value: 0
               }]
            }*/]
         };

         var _operators = [
            'equal',
            'not_equal',
            'in',
            'not_in',
            'less',
            'less_or_equal',
            'greater',
            'greater_or_equal',
            'between',
            'not_between',
            'begins_with',
            'not_begins_with',
            'contains',
            'not_contains',
            'ends_with',
            'not_ends_with',
            'is_empty',
            'is_not_empty',
            'is_null',
            'is_not_null'
         ];

         _select2_builder_ajax = Object.assign({}, _select2_ajax, {
               width: '100%',
               ajax: Object.assign({}, _select2_ajax.ajax, {
                  url: '{{ path_for('dropdown-getvalue') }}'
               })
            }
         );

         $('#query_builder').queryBuilder({
            plugins: [
               'sortable',
               'filter-description',
               'unique-filter',
               'bt-tooltip-errors',
               'bt-checkbox',
               'invert',
               'not-group'
            ],
            filters: [
   {% set groupname = '' %}
   {% for key, options in search_options %}
               {
                  id: '{{ key }}',
                  type: 'string',
                  input: 'select',
                  plugin: 'select2',
                  plugin_config: _select2_builder_ajax,
                  valueSetter: function(rule, value) {},
      {% if options is not iterable %}
         {% set groupname = options %}
      {% elseif options.table is not defined %}
         {% set groupname = options.name %}
      {% else %}
                  label: '{{ options.name }}',
      {% endif %}
                  optgroup: '{{ groupname }}',
                  operators: _operators
               }{% if not loop.last %},{% endif %}
   {% endfor %}
            {#
      // Display normal search parameters
      for ($i=0; $i<count($p['criteria']); $i++) {
         $_POST['itemtype'] = $itemtype;
         $_POST['num']      = $i;
         include(GLPI_ROOT.'/ajax/searchrow.php');
      }

      $metanames = [];
      $linked =  self::getMetaItemtypeAvailable($itemtype);

      if (is_array($linked) && (count($linked) > 0)) {
         for ($i=0; $i<count($p['metacriteria']); $i++) {

            $_POST['itemtype'] = $itemtype;
            $_POST['num'] = $i;
            include(GLPI_ROOT.'/ajax/searchmetarow.php');
         }
      }
 

#}


            {#
      global $CFG_GLPI;

      // Default values of parameters
      $p['sort']         = '';
      $p['is_deleted']   = 0;
      $p['as_map']       = 0;
      $p['criteria']     = [];
      $p['metacriteria'] = [];
      if (class_exists($itemtype)) {
         $p['target']       = $itemtype::getSearchURL();
      } else {
         $p['target']       = Toolbox::getItemTypeSearchURL($itemtype);
      }
      $p['showreset']    = true;
      $p['showbookmark'] = true;
      $p['addhidden']    = [];
      $p['actionname']   = 'search';
      $p['actionvalue']  = _sx('button', 'Search');

      foreach ($params as $key => $val) {
         $p[$key] = $val;
      }

      echo "<form name='searchform$itemtype' method='get' action=\"".$p['target']."\">";
      echo "<div id='searchcriterias'>";
      $nbsearchcountvar      = 'nbcriteria'.strtolower($itemtype).mt_rand();
      $nbmetasearchcountvar  = 'nbmetacriteria'.strtolower($itemtype).mt_rand();
      $searchcriteriatableid = 'criteriatable'.strtolower($itemtype).mt_rand();
      // init criteria count
      $js  = "var $nbsearchcountvar=".count($p['criteria']).";";
      $js .= "var $nbmetasearchcountvar=".count($p['metacriteria']).";";
      echo Html::scriptBlock($js);

      echo "<table class='tab_cadre_fixe' >";
      echo "<tr class='tab_bg_1'>";

      if ((count($p['criteria']) + count($p['metacriteria'])) > 1) {
         echo "<td width='10' class='center'>";
         echo "<a href=\"javascript:toggleTableDisplay('$searchcriteriatableid','searchcriteriasimg',
                                                       '".$CFG_GLPI["root_doc"].
                                                          "/pics/deplier_down.png',
                                                       '".$CFG_GLPI["root_doc"].
                                                          "/pics/deplier_up.png')\">";
         echo "<img alt='' name='searchcriteriasimg' src=\"".$CFG_GLPI["root_doc"].
                                                            "/pics/deplier_up.png\">";
         echo "</td>";
      }

      echo "<td>";

      echo "<table class='tab_format' id='$searchcriteriatableid'>";

      // Display normal search parameters
      for ($i=0; $i<count($p['criteria']); $i++) {
         $_POST['itemtype'] = $itemtype;
         $_POST['num']      = $i;
         include(GLPI_ROOT.'/ajax/searchrow.php');
      }

      $metanames = [];
      $linked =  self::getMetaItemtypeAvailable($itemtype);

      if (is_array($linked) && (count($linked) > 0)) {
         for ($i=0; $i<count($p['metacriteria']); $i++) {

            $_POST['itemtype'] = $itemtype;
            $_POST['num'] = $i;
            include(GLPI_ROOT.'/ajax/searchmetarow.php');
         }
      }
      echo "</table>\n";
      echo "</td>\n";

      echo "<td width='150px'>";
      echo "<table width='100%'>";

      // Display deleted selection

      echo "<tr>";

      // Display submit button
      echo "<td width='80' class='center'>";
      echo "<input type='submit' name='".$p['actionname']."' value=\"".$p['actionvalue']."\" class='submit' >";
      echo "</td>";
      if ($p['showbookmark'] || $p['showreset']) {
         echo "<td class='no-wrap'>";
         if ($p['showbookmark']) {
            //TODO: change that!
            Ajax::createIframeModalWindow('loadbookmark',
                                    SavedSearch::getSearchURL() . "?action=load&type=" . SavedSearch::SEARCH,
                                    ['title'         => __('Load a saved search')]);
            SavedSearch::showSaveButton(SavedSearch::SEARCH, $itemtype);
         }

         if ($p['showreset']) {
            echo "<a class='fa fa-undo reset-search' href='"
               .$p['target']
               .(strpos($p['target'], '?') ? '&amp;' : '?')
               ."reset=reset' title=\"".__s('Blank')."\"
               ><span class='sr-only'>" . __s('Blank')  ."</span></a>";
         }
         echo "</td>";
      }
      echo "</tr></table>\n";

      echo "</td></tr>";
      echo "</table>\n";

      if (count($p['addhidden'])) {
         foreach ($p['addhidden'] as $key => $val) {
            echo Html::hidden($key, ['value' => $val]);
         }
      }

      // For dropdown
      echo Html::hidden('itemtype', ['value' => $itemtype]);
      // Reset to start when submit new search
      echo Html::hidden('start', ['value'    => 0]);

      echo "</div>";
      Html::closeForm();

#}
            , {
               id: 'name',
               label: 'Name',
               type: 'string',
               unique: true,
               description: 'This filter is "unique", it can be used only once'
            }/*, {
               id: 'category',
               label: 'Category',
               type: 'integer',
               input: 'checkbox',
               values: {
                  1: 'Books',
                  2: 'Movies',
                  3: 'Music',
                  4: 'Goodies'
               },
               color: 'primary',
               description: 'This filter uses Awesome Bootstrap Checkboxes',
               operators: ['equal', 'not_equal', 'in', 'not_in', 'is_null', 'is_not_null']
            }, {
               id: 'in_stock',
               label: 'In stock',
               type: 'integer',
               input: 'radio',
               values: {
                  1: 'Yes',
                  0: 'No'
               },
               colors: {
                  1: 'success',
                  0: 'danger'
               },
               description: 'This filter also uses Awesome Bootstrap Checkboxes',
               operators: ['equal']
            }, {
               id: 'price',
               label: 'Price',
               type: 'double',
               validation: {
                  min: 0,
                  step: 0.01
               }
            }*/],
            rules: rules_plugins
         }).on('afterUpdateRuleFilter.queryBuilder', function() {
            //select2 on newly created element 
            _bindSimpleSelect('#query_builder .rule-operator-container select');
         });

         /*$('#btn-reset').on('click', function() {
         $('#builder-plugins').queryBuilder('reset');
         });

         $('#btn-set').on('click', function() {
         $('#builder-plugins').queryBuilder('setRules', rules_plugins);
         });

         $('#btn-get').on('click', function() {
            var result = $('#builder-plugins').queryBuilder('getRules');

            if (!$.isEmptyObject(result)) {
               alert(JSON.stringify(result, null, 2));
            }
         });*/

         _bindSimpleSelect('#query_builder .rule-filter-container select, #query_builder .rule-operator-container select');
      });
   </script>
{% endblock %}
