{#
 * ---------------------------------------------------------------------
 * GLPI - Gestionnaire Libre de Parc Informatique
 * Copyright (C) 2015-2018 Teclib' and contributors.
 *
 * http://glpi-project.org
 *
 * based on GLPI - Gestionnaire Libre de Parc Informatique
 * Copyright (C) 2003-2014 by the INDEPNET Development Team.
 *
 * ---------------------------------------------------------------------
 *
 * LICENSE
 *
 * This file is part of GLPI.
 *
 * GLPI is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * GLPI is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with GLPI. If not, see <http://www.gnu.org/licenses/>.
 * ---------------------------------------------------------------------
 #}
{% extends "glpi_page.twig" %}

{% block content %}
   {% include "list_contents.twig" with {'main_header': true, form_header: true} %}
{% endblock %}

{% block head %}
   {% set css_paths = css_paths|default([])|merge([
      js_libs ~ '/jQuery-QueryBuilder/dist/css/query-builder.default.min.css',
      'public/css/glpi-querybuilder.css'
      ]) %}
   {{ parent() }}
{% endblock %}

{% block javascripts %}
   {% set js_paths = js_paths|default([])|merge([
         js_libs ~ '/jquery-ui/jquery-ui.min.js',
         js_libs ~ '/jquery-extendext/jQuery.extendext.min.js',
         js_libs ~ '/doT/doT.min.js',
         js_libs ~ '/interactjs/dist/interact.min.js',
         js_libs ~ '/jQuery-QueryBuilder/dist/js/query-builder.js',
         js_libs ~ '/moment/min/moment-with-locales.min.js'
      ]) %}
   {{ parent() }}
   <script type="text/javascript">
      $(function() {
         $('#default_items').on('click', function() {
            createModalWindow(
               CFG_GLPI.root_doc + '{{ path_for('display-preference', {'itemtype': search_data.itemtype}) }}', {
                  'title': '{{ __('Select default items to show') }}',
                  {#'extraparams': '{{ {'target': path_for('slash')}|json_encode(constant('JSON_FORCE_OBJECT')) }}',#}
                  'open': true
               }
            );
         });
                  {#$search_config_top
                  .= Ajax::createIframeModalWindow('search_config_top',
                                                   $CFG_GLPI["root_doc"].
                                                      "/front/displaypreference.form.php?itemtype=".
                                                      $data['itemtype'],
                                                   ['title'
                                                            => __('Select default items to show'),
                                                         'reloadonclose'
                                                            => true,
                                                         'display'
                                                            => false]);#}
         $('#is_deleted').on('click', function() {
            //onClick="toogle('is_deleted','','','');
            //document.forms['searchform{#$_POST["itemtype"]#}'].submit();"
            toogle('is_deleted','','','');
            $('form#search_form').submit();
         });
         $('#as_map').on('click', function() {
            toogle('as_map','','','');
            //document.forms['searchform{#$data["itemtype"]#}'].submit();
            $('form#search_form').submit();
         });

         var rules_plugins = {
            condition: 'AND',
            rules: [{
               id: 'view',
               operator: 'contains',
               value: ''
            }/*, {
               condition: 'OR',
               rules: [{
                  id: 'category',
                  operator: 'in',
                  value: [1, 2]
               }, {
                  id: 'in_stock',
                  operator: 'equal',
                  value: 0
               }]
            }*/]
         };

         var _operators = [
            'equal',
            'not_equal',
            'in',
            'not_in',
            'less',
            'less_or_equal',
            'greater',
            'greater_or_equal',
            'between',
            'not_between',
            'begins_with',
            'not_begins_with',
            'contains',
            'not_contains',
            'ends_with',
            'not_ends_with',
            'is_empty',
            'is_not_empty',
            'is_null',
            'is_not_null'
         ];

         _select2_builder_ajax = Object.assign({}, _select2_ajax, {
               width: '100%'
            }
         );

{% if old_search == false %}
         $('#query_builder').queryBuilder({
            plugins: [
               'sortable',
               'filter-description',
               'unique-filter',
               'bt-tooltip-errors',
               'bt-checkbox',
               'not-group'
            ],
            filters: [
               {
                  id: 'view',
                  label: '{{ __('Items seen' ) }}',
                  type: 'string',
                  description: '{{ __('Search on currently displayed columns')|escape('js') }}',
                  operators: ['contains', 'not_contains'],
               },
   {% set groupname = '' %}
   {% for key, options in search_options %}
      {% if options is not iterable %}
         {% set groupname = options %}
      {% elseif options.table is not defined %}
         {% set groupname = options.name %}
      {% else %}
               {
                  id: '{{ key }}',
                  type: 'string',
                  label: '{{ options.name }}',
                  field: '{{ options.table }}.{{ options.field }}',
                  optgroup: '{{ groupname }}',
                  valueSetter: function(rule, value) {},
{#

itemlink
#}
      {% set _input = 'text' %}

      {% if options.datatype is defined %}
         {% if options.datatype == 'dropdown' %}
            {% set _input = 'select' %}
         {% elseif options.datatype == '' %}
         {% endif %}
      {% endif %}

      {% if _input == 'select' %}
                  plugin: 'select2',
                  plugin_config: Object.assign({}, _select2_builder_ajax, {
                     ajax: Object.assign({}, _select2_ajax.ajax, {
                        url: '{{ path_for('dropdown-getvalue', {'itemtype': 'PLACEBO'}) }}'.replace(/PLACEBO/, 'none')
                     })
                  }),
      {% endif %}
                  input: '{{ _input }}',
                  operators: _operators
               }{% if not loop.last %},{% endif %}
      {% endif %}
   {% endfor %}
            {#
      // Display normal search parameters
      for ($i=0; $i<count($p['criteria']); $i++) {
         $_POST['itemtype'] = $itemtype;
         $_POST['num']      = $i;
         include(GLPI_ROOT.'/ajax/searchrow.php');
      }

      $metanames = [];
      $linked =  self::getMetaItemtypeAvailable($itemtype);

      if (is_array($linked) && (count($linked) > 0)) {
         for ($i=0; $i<count($p['metacriteria']); $i++) {

            $_POST['itemtype'] = $itemtype;
            $_POST['num'] = $i;
            include(GLPI_ROOT.'/ajax/searchmetarow.php');
         }
      }
 

#}


            {#
      global $CFG_GLPI;

      // Default values of parameters
      $p['sort']         = '';
      $p['is_deleted']   = 0;
      $p['as_map']       = 0;
      $p['criteria']     = [];
      $p['metacriteria'] = [];
      if (class_exists($itemtype)) {
         $p['target']       = $itemtype::getSearchURL();
      } else {
         $p['target']       = Toolbox::getItemTypeSearchURL($itemtype);
      }
      $p['addhidden']    = [];
      $p['actionname']   = 'search';
      $p['actionvalue']  = _sx('button', 'Search');

      foreach ($params as $key => $val) {
         $p[$key] = $val;
      }

      echo "<form name='searchform$itemtype' method='get' action=\"".$p['target']."\">";
      echo "<div id='searchcriterias'>";
      $nbsearchcountvar      = 'nbcriteria'.strtolower($itemtype).mt_rand();
      $nbmetasearchcountvar  = 'nbmetacriteria'.strtolower($itemtype).mt_rand();
      $searchcriteriatableid = 'criteriatable'.strtolower($itemtype).mt_rand();
      // init criteria count
      $js  = "var $nbsearchcountvar=".count($p['criteria']).";";
      $js .= "var $nbmetasearchcountvar=".count($p['metacriteria']).";";
      echo Html::scriptBlock($js);

      echo "<table class='tab_cadre_fixe' >";
      echo "<tr class='tab_bg_1'>";

      if ((count($p['criteria']) + count($p['metacriteria'])) > 1) {
         echo "<td width='10' class='center'>";
         echo "<a href=\"javascript:toggleTableDisplay('$searchcriteriatableid','searchcriteriasimg',
                                                       '".$CFG_GLPI["root_doc"].
                                                          "/pics/deplier_down.png',
                                                       '".$CFG_GLPI["root_doc"].
                                                          "/pics/deplier_up.png')\">";
         echo "<img alt='' name='searchcriteriasimg' src=\"".$CFG_GLPI["root_doc"].
                                                            "/pics/deplier_up.png\">";
         echo "</td>";
      }

      echo "<td>";

      echo "<table class='tab_format' id='$searchcriteriatableid'>";

      // Display normal search parameters
      for ($i=0; $i<count($p['criteria']); $i++) {
         $_POST['itemtype'] = $itemtype;
         $_POST['num']      = $i;
         include(GLPI_ROOT.'/ajax/searchrow.php');
      }

      $metanames = [];
      $linked =  self::getMetaItemtypeAvailable($itemtype);

      if (is_array($linked) && (count($linked) > 0)) {
         for ($i=0; $i<count($p['metacriteria']); $i++) {

            $_POST['itemtype'] = $itemtype;
            $_POST['num'] = $i;
            include(GLPI_ROOT.'/ajax/searchmetarow.php');
         }
      }
      echo "</table>\n";
      echo "</td>\n";

      echo "<td width='150px'>";
      echo "<table width='100%'>";

      // Display deleted selection

      echo "<tr>";

      // Display submit button
      echo "<td width='80' class='center'>";
      echo "<input type='submit' name='".$p['actionname']."' value=\"".$p['actionvalue']."\" class='submit' >";
      echo "</td>";
         echo "<td class='no-wrap'>";
            //TODO: change that!
            Ajax::createIframeModalWindow('loadbookmark',
                                    SavedSearch::getSearchURL() . "?action=load&type=" . SavedSearch::SEARCH,
                                    ['title'         => __('Load a saved search')]);
            SavedSearch::showSaveButton(SavedSearch::SEARCH, $itemtype);

            echo "<a class='fa fa-undo reset-search' href='"
               .$p['target']
               .(strpos($p['target'], '?') ? '&amp;' : '?')
               ."reset=reset' title=\"".__s('Blank')."\"
               ><span class='sr-only'>" . __s('Blank')  ."</span></a>";
         echo "</td>";
      echo "</tr></table>\n";

      echo "</td></tr>";
      echo "</table>\n";

      if (count($p['addhidden'])) {
         foreach ($p['addhidden'] as $key => $val) {
            echo Html::hidden($key, ['value' => $val]);
         }
      }

      // For dropdown
      echo Html::hidden('itemtype', ['value' => $itemtype]);
      // Reset to start when submit new search
      echo Html::hidden('start', ['value'    => 0]);

      echo "</div>";
      Html::closeForm();

#}
            /*, {
               id: 'name',
               label: 'Name',
               type: 'string',
               unique: true,
               description: 'This filter is "unique", it can be used only once'
            } , {
               id: 'category',
               label: 'Category',
               type: 'integer',
               input: 'checkbox',
               values: {
                  1: 'Books',
                  2: 'Movies',
                  3: 'Music',
                  4: 'Goodies'
               },
               color: 'primary',
               description: 'This filter uses Awesome Bootstrap Checkboxes',
               operators: ['equal', 'not_equal', 'in', 'not_in', 'is_null', 'is_not_null']
            }, {
               id: 'in_stock',
               label: 'In stock',
               type: 'integer',
               input: 'radio',
               values: {
                  1: 'Yes',
                  0: 'No'
               },
               colors: {
                  1: 'success',
                  0: 'danger'
               },
               description: 'This filter also uses Awesome Bootstrap Checkboxes',
               operators: ['equal']
            }, {
               id: 'price',
               label: 'Price',
               type: 'double',
               validation: {
                  min: 0,
                  step: 0.01
               }
            }*/],
            rules: rules_plugins
         }).on('afterUpdateRuleFilter.queryBuilder', function() {
            //select2 on newly created element 
            _bindSimpleSelect('#query_builder .rule-operator-container select');
         });
{% endif %}

         /*$('#btn-reset').on('click', function() {
         $('#builder-plugins').queryBuilder('reset');
         });

         $('#btn-set').on('click', function() {
         $('#builder-plugins').queryBuilder('setRules', rules_plugins);
         });

         $('#btn-get').on('click', function() {
            var result = $('#builder-plugins').queryBuilder('getRules');

            if (!$.isEmptyObject(result)) {
               alert(JSON.stringify(result, null, 2));
            }
         });*/

         _bindSimpleSelect('#query_builder .rule-filter-container select, #query_builder .rule-operator-container select');

         /* Botstap magic.. Does not worK.
            $('#search_criteria').boxWidget({
            collapseTrigger: '#toggle_search_criteria',
         });*/
         $('#toggle_search_criteria').on('click', function() {
            $('#search_criteria').toggle();
            $(this)
               .toggleClass('btn-default')
               .toggleClass('btn-primary')
         });
      });
   </script>
{% endblock %}
